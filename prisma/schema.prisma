generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  ApiKey        ApiKey[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ApiKey {
  id            String          @id @default(uuid())
  key           String          @unique
  owner         String
  createdAt     DateTime        @default(now())
  lastUsed      DateTime?
  usageCount    Int             @default(0)
  isActive      Boolean         @default(true)
  userId        String?
  User          User?           @relation(fields: [userId], references: [id])
  PaymentIntent PaymentIntent[]
  UsageLog      UsageLog[]

  @@index([key])
  @@index([userId])
}

model UsageLog {
  id           Int      @id @default(autoincrement())
  apiKeyId     String
  endpoint     String
  method       String
  statusCode   Int
  responseTime Int
  ip           String
  createdAt    DateTime @default(now())
  apiKey       ApiKey   @relation(fields: [apiKeyId], references: [id])

  @@index([apiKeyId])
  @@index([endpoint])
  @@index([createdAt])
}

model PaymentIntent {
  id                      String    @id @default(uuid())
  amount                  Float
  merchant                String
  paymentMethodType       String
  metadata                Json?
  status                  String    @default("pending")
  expiresAt               DateTime
  idempotencyKey          String    @unique
  reference               String?   @unique
  createdAt               DateTime  @default(now())
  confirmedAt             DateTime?
  verificationDetails     Json?
  apiKeyId                String
  expectedReceiverAccount String
  expectedReceiverName    String?
  apiKey                  ApiKey    @relation(fields: [apiKeyId], references: [id])

  @@index([apiKeyId])
  @@index([merchant])
  @@index([reference])
}

enum Role {
  USER
  ADMIN
}
